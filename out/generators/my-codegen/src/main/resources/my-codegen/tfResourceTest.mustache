package sumologic

import (
	"fmt"
	"testing"
	"os"

	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/terraform"
        "github.com/hashicorp/terraform/helper/acctest"
)

{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
{{#vendorExtensions.x-tf-create}}
func TestAcc{{vendorExtensions.x-tf-resourceName}}Create(t *testing.T) {
        var {{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}} {{vendorExtensions.x-tf-resourceName}}
        {{#models}}
          {{#model}}
            {{#vendorExtensions.x-tf-resource}}
            {{#vars}}
              {{^vendorExtensions.x-tf-resource-readonly}}
        test{{name}} := {{#isString}}acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum){{/isString}}{{#isBoolean}}true{{/isBoolean}}{{#isListContainer}}[1]string{acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum)}{{/isListContainer}}
              {{/vendorExtensions.x-tf-resource-readonly}}
              {{/vars}}
            {{/vendorExtensions.x-tf-resource}}
          {{/model}}
        {{/models}}
        resource.Test(t, resource.TestCase{
                PreCheck: func() { TestAccPreCheck(t) },
                Providers:    testAccProviders,
                CheckDestroy: testAccCheck{{vendorExtensions.x-tf-resourceName}}Destroy({{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}),
                Steps: []resource.TestStep{
                        {
                                Config: testAccSumologic{{vendorExtensions.x-tf-resourceName}}({{#lambda.joinWithComma}}{{#models}}{{#model}}{{#vendorExtensions.x-tf-resource}}{{#vars}}{{^vendorExtensions.x-tf-resource-readonly}}test{{name}}  {{/vendorExtensions.x-tf-resource-readonly}}{{/vars}}{{/vendorExtensions.x-tf-resource}}{{/model}}{{/models}}{{/lambda.joinWithComma}}),
                                Check: resource.ComposeTestCheckFunc(
                                        testAccCheck{{vendorExtensions.x-tf-resourceName}}Exists("sumologic_{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}.test", &{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}, t),
                                        testAccCheck{{vendorExtensions.x-tf-resourceName}}Attributes("sumologic_{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}.test"),
                                        {{#models}}
                                          {{#model}}
                                            {{#vendorExtensions.x-tf-resource}}
                                            {{#vars}}
                                              {{^vendorExtensions.x-tf-resource-readonly}}
                                        resource.TestCheckResourceAttr("sumologic_{{#lambda.lowercase}}{{#models}}{{#model}}{{#vendorExtensions.x-tf-resource}}{{vendorExtensions.x-tf-object}}{{/vendorExtensions.x-tf-resource}}{{/model}}{{/models}}{{/lambda.lowercase}}.test", "{{#lambda.lowercase}}{{nameInSnakeCase}}{{/lambda.lowercase}}", test{{name}}),
                                              {{/vendorExtensions.x-tf-resource-readonly}}
                                            {{/vars}}
                                            {{/vendorExtensions.x-tf-resource}}
                                          {{/model}}
                                        {{/models}}
                                ),
                        },
                },
        })
}
{{/vendorExtensions.x-tf-create}}

{{#vendorExtensions.x-tf-update}}
func TestAcc{{vendorExtensions.x-tf-resourceName}}Update(t *testing.T) {
  var {{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}} {{vendorExtensions.x-tf-resourceName}}
{{#models}}
  {{#model}}
    {{#vendorExtensions.x-tf-resource}}
      {{#vars}}
        {{^vendorExtensions.x-tf-resource-readonly}}
          test{{name}} := {{#isString}}acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum){{/isString}}{{#isBoolean}}true{{/isBoolean}}{{#isListContainer}}[1]string{acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum)}{{/isListContainer}}
        {{/vendorExtensions.x-tf-resource-readonly}}
      {{/vars}}
    {{/vendorExtensions.x-tf-resource}}
  {{/model}}
{{/models}}

{{#models}}
  {{#model}}
    {{#vendorExtensions.x-tf-resource}}
      {{#vars}}
        {{^vendorExtensions.x-tf-resource-readonly}}
          testUpdated{{name}} := {{#isString}}acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum){{/isString}}{{#isBoolean}}false{{/isBoolean}}{{#isListContainer}}[1]string{acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum)}{{/isListContainer}}
        {{/vendorExtensions.x-tf-resource-readonly}}
      {{/vars}}
    {{/vendorExtensions.x-tf-resource}}
  {{/model}}
{{/models}}

	resource.Test(t, resource.TestCase{
		PreCheck: func() { TestAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheck{{vendorExtensions.x-tf-resourceName}}Destroy({{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}),
		Steps: []resource.TestStep{
			{
				Config: testAccSumologic{{tags.x-tf-resourceName}}({{#lambda.joinWithComma}}{{#models}}{{#model}}{{#vendorExtensions.x-tf-resource}}{{#vars}}{{^vendorExtensions.x-tf-resource-readonly}}test{{name}}  {{/vendorExtensions.x-tf-resource-readonly}}{{/vars}}{{/vendorExtensions.x-tf-resource}}{{/model}}{{/models}}{{/lambda.joinWithComma}}),
				Check: resource.ComposeTestCheckFunc(
					testAccCheck{{vendorExtensions.x-tf-resourceName}}Exists("sumologic_{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}.test", &{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}, t),
					testAccCheck{{vendorExtensions.x-tf-resourceName}}Attributes("sumologic_{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}.test"),
{{#models}}
  {{#model}}
    {{#vendorExtensions.x-tf-resource}}
      {{#vars}}
        {{^vendorExtensions.x-tf-resource-readonly}}
          resource.TestCheckResourceAttr("sumologic_{{#lambda.lowercase}}{{#models}}{{#model}}{{#vendorExtensions.x-tf-resource}}{{vendorExtensions.x-tf-object}}{{/vendorExtensions.x-tf-resource}}{{/model}}{{/models}}{{/lambda.lowercase}}.test", "{{#lambda.lowercase}}{{nameInSnakeCase}}{{/lambda.lowercase}}", test{{name}}),
        {{/vendorExtensions.x-tf-resource-readonly}}
      {{/vars}}
    {{/vendorExtensions.x-tf-resource}}
  {{/model}}
{{/models}}
				),
			},
			{
				Config: testAccSumologic{{vendorExtensions.x-tf-resourceName}}Update({{#lambda.joinWithComma}}{{#models}}{{#model}}{{#vendorExtensions.x-tf-resource}}{{#vars}}{{^vendorExtensions.x-tf-resource-readonly}}testUpdated{{name}}  {{/vendorExtensions.x-tf-resource-readonly}}{{/vars}}{{/vendorExtensions.x-tf-resource}}{{/model}}{{/models}}{{/lambda.joinWithComma}}),
				Check: resource.ComposeTestCheckFunc(
					testAccCheck{{vendorExtensions.x-tf-resourceName}}Exists("sumologic_{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}.test", &{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}, t),
					testAccCheck{{vendorExtensions.x-tf-resourceName}}Attributes("sumologic_{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}.test"),
{{#models}}
  {{#model}}
    {{#vendorExtensions.x-tf-resource}}
      {{#vars}}
        {{^vendorExtensions.x-tf-resource-readonly}}
          resource.TestCheckResourceAttr("sumologic_{{#lambda.lowercase}}{{#models}}{{#model}}{{#vendorExtensions.x-tf-resource}}{{vendorExtensions.x-tf-object}}{{/vendorExtensions.x-tf-resource}}{{/model}}{{/models}}{{/lambda.lowercase}}.test", "{{#lambda.lowercase}}{{nameInSnakeCase}}{{/lambda.lowercase}}", testUpdated{{name}}),
        {{/vendorExtensions.x-tf-resource-readonly}}
      {{/vars}}
    {{/vendorExtensions.x-tf-resource}}
  {{/model}}
{{/models}}
				),
			},
		},
	})
}
{{/vendorExtensions.x-tf-update}}

{{#vendorExtensions.x-tf-read}}
func testAccCheck{{vendorExtensions.x-tf-resourceName}}Exists(name string, {{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}} *{{vendorExtensions.x-tf-resourceName}}, t *testing.T) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[name]
		if !ok {
			return fmt.Errorf("{{vendorExtensions.x-tf-resourceName}} not found: %s", name)
		}

		if rs.Primary.ID == "" {
			return fmt.Errorf("{{vendorExtensions.x-tf-resourceName}} ID is not set")
		}

		id := rs.Primary.ID
		c := testAccProvider.Meta().(*Client)
		new{{vendorExtensions.x-tf-resourceName}}, err := c.Get{{vendorExtensions.x-tf-resourceName}}(id)
		if err != nil {
			return fmt.Errorf("{{vendorExtensions.x-tf-resourceName}} %s not found", id)
		}
		{{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}} = new{{vendorExtensions.x-tf-resourceName}}
		return nil
	}
}
{{/vendorExtensions.x-tf-read}}

{{#vendorExtensions.x-tf-delete}}
func testAccCheck{{vendorExtensions.x-tf-resourceName}}Destroy({{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}} {{vendorExtensions.x-tf-resourceName}}) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		client := testAccProvider.Meta().(*Client)
		_, err := client.Get{{vendorExtensions.x-tf-resourceName}}({{#lambda.lowercase}}{{vendorExtensions.x-tf-resourceName}}{{/lambda.lowercase}}.ID)
		if err == nil {
			return fmt.Errorf("{{vendorExtensions.x-tf-resourceName}} still exists")
		}
		return nil
	}
}
{{/vendorExtensions.x-tf-delete}}

      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
{{#models}}
  {{#model}}
    {{#vendorExtensions.x-tf-resource}}
func testAccSumologic{{vendorExtensions.x-tf-object}}({{#lambda.joinWithComma}}{{#vars}}{{^vendorExtensions.x-tf-resource-readonly}}{{name}} {{#isString}}string{{/isString}}{{#isBoolean}}bool{{/isBoolean}}{{#isListContainer}}[]string{{/isListContainer}}  {{/vendorExtensions.x-tf-resource-readonly}}{{/vars}}{{/lambda.joinWithComma}}) string {
	return fmt.Sprintf(`
resource "sumologic_{{#lambda.lowercase}}{{vendorExtensions.x-tf-object}}{{/lambda.lowercase}}" "test" {
{{#vars}}
  {{^vendorExtensions.x-tf-resource-readonly}}
  {{name}} = {{#isString}}%s{{/isString}}{{#isBoolean}}%t{{/isBoolean}}{{#isListContainer}}%v{{/isListContainer}}
  {{/vendorExtensions.x-tf-resource-readonly}}
{{/vars}}
}
`{{#vendorExtensions.x-tf-resource}}{{#vars}}{{^vendorExtensions.x-tf-resource-readonly}}, {{name}}{{/vendorExtensions.x-tf-resource-readonly}}{{/vars}}{{/vendorExtensions.x-tf-resource}})
}

func testAccSumologic{{vendorExtensions.x-tf-object}}Update({{#lambda.joinWithComma}}{{#vars}}{{^vendorExtensions.x-tf-resource-readonly}}{{name}} {{#isString}}string{{/isString}}{{#isBoolean}}bool{{/isBoolean}}{{#isListContainer}}[]string{{/isListContainer}}  {{/vendorExtensions.x-tf-resource-readonly}}{{/vars}}{{/lambda.joinWithComma}}) string {
	return fmt.Sprintf(`
resource "sumologic_{{#lambda.lowercase}}{{vendorExtensions.x-tf-object}}{{/lambda.lowercase}}" "test" {
  {{#vars}}
    {{^vendorExtensions.x-tf-resource-readonly}}
      {{name}} = {{#isString}}%s{{/isString}}{{#isBoolean}}%t{{/isBoolean}}{{#isListContainer}}%v{{/isListContainer}}
    {{/vendorExtensions.x-tf-resource-readonly}}
  {{/vars}}
}
`{{#vars}}{{^vendorExtensions.x-tf-resource-readonly}}, {{name}}{{/vendorExtensions.x-tf-resource-readonly}}{{/vars}})
}
    {{/vendorExtensions.x-tf-resource}}

    {{#vendorExtensions.x-tf-resource}}
func testAccCheck{{vendorExtensions.x-tf-object}}Attributes(name string) resource.TestCheckFunc {
  return func(s *terraform.State) error {
      f := resource.ComposeTestCheckFunc(
        {{#vars}}
          {{^vendorExtensions.x-tf-resource-readonly}}
        resource.TestCheckResourceAttrSet(name, "{{name}}"),
          {{/vendorExtensions.x-tf-resource-readonly}}
        {{/vars}}
      )
      return f(s)
   }
}
    {{/vendorExtensions.x-tf-resource}}
  {{/model}}
{{/models}}